package database;


import com.mongodb.*;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.FindOneAndUpdateOptions;
import com.mongodb.client.model.IndexOptions;
import com.mongodb.client.model.Indexes;
import com.mongodb.client.model.UpdateOptions;
import game.Player;
import game.controllers.ControllerFactory;
import game.controllers.HumanControllerFactory;
import org.bson.Document;
import org.bson.types.ObjectId;
import util.GameInfo;

import java.util.*;


public class MongoDB implements Database {
    private static final String DATABASE_NAME = "RodsAndHarpoonsDB";
    String address = "mongodb+srv://admin:admin@cluster0-gx7zn.mongodb.net";
    private MongoClient mongoClient;

    //database is initialized lazily
    //this class won't be tested and MongoClient has only one proper constructor and subtype in this project, so this solution is probably acceptable
    public MongoClient getMongoClientAndInitIfNeeded() {
        if(mongoClient == null) {
            mongoClient = new MongoClient(new MongoClientURI(address));
            MongoCollection<Document> players = mongoClient.getDatabase(DATABASE_NAME).getCollection("players");
            players.createIndex(Indexes.ascending("nickname"), new IndexOptions().unique(true));
        }
        return mongoClient;
    }

    private MongoDatabase getDatabaseAndInitIfNeeded() {
        return getMongoClientAndInitIfNeeded().getDatabase(DATABASE_NAME);
    }

    //saves game and returns it's id (as String) auto-generated by database
    @Override
    public String saveGame(GameInfo gameInfo) {
        gameInfo.getPlayers().sort((a, b) -> -Integer.compare(a.getPoints(), b.getPoints()));
        Document document = gameInfo.toDocument();

        getDatabaseAndInitIfNeeded().getCollection("matches").insertOne(document);

        ObjectId gameId = document.get("_id", ObjectId.class);
        return gameId.toHexString();
    }

    @Override
    public void updateGame(String gameId, GameInfo gameInfo) {
        gameInfo.getPlayers().sort((a, b) -> -Integer.compare(a.getPoints(), b.getPoints()));
        replaceDocument(new ObjectId(gameId), gameInfo.toDocument(), getDatabaseAndInitIfNeeded().getCollection("matches"));
    }

    @Override
    public void removeGame(String gameId) {
        getDatabaseAndInitIfNeeded().getCollection("matches").deleteOne(new BasicDBObject("_id", new ObjectId(gameId)));
    }

    public ArrayList<Document> getPlayerMatches(String nickName) {
        ArrayList<Document> result = new ArrayList<>();
        BasicDBObject query = new BasicDBObject("players.nickname", nickName);
        FindIterable<Document> cursor = getDatabaseAndInitIfNeeded().getCollection("matches").find(query);
        for(Document gameDocument : cursor) {
            result.add(gameDocument);
        }
        Collections.reverse(result);
        return result;
    }

    public ArrayList<Document> getPlayersHighScores(int limit) {
        ArrayList<Document> result = new ArrayList<>();
        FindIterable<Document> cursor = getDatabaseAndInitIfNeeded().
                getCollection("players").find().sort(new BasicDBObject("highscore", -1)).limit(limit);
        for(Document player : cursor) {
            result.add(player);
        }
        return result;

    }

    public void updatePlayersHighScore(Collection<Player> players, Collection<ControllerFactory> controllerFactories) {
        FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().upsert(true);

        Iterator<Player> playerIt = players.iterator();
        Iterator<ControllerFactory> controllerFactoryIt = controllerFactories.iterator();
        while(playerIt.hasNext()) {
            Player player = playerIt.next();
            ControllerFactory controllerFactory = controllerFactoryIt.next();

            //don't save AI players
            if(controllerFactory instanceof HumanControllerFactory) {
                BasicDBObject query = new BasicDBObject("nickname", player.getNickname());
                BasicDBObject highScoreUpdate = new BasicDBObject("highscore", player.getPoints());
                BasicDBObject update = new BasicDBObject("$max", highScoreUpdate);
                getDatabaseAndInitIfNeeded().getCollection("players").findOneAndUpdate(query, update, options);
            }
        }
    }

    //replaces document with given id with newDocument, saving old document's id
    private void replaceDocument(ObjectId _id, Document newDocument, MongoCollection<Document> collection) {
        newDocument.put("_id", _id);
        BasicDBObject updateFields = new BasicDBObject();
        for(Map.Entry<String, Object> e : newDocument.entrySet())
            if(!e.getKey().equals("_id"))
                updateFields.append(e.getKey(), e.getValue());

        collection.updateOne(
                new BasicDBObject("_id", _id),
                new BasicDBObject("$set", updateFields),
                new UpdateOptions().upsert(true)
        );
    }
}
