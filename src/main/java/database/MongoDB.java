package database;


import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.FindOneAndUpdateOptions;
import com.mongodb.client.model.IndexOptions;
import com.mongodb.client.model.Indexes;
import com.mongodb.client.model.UpdateOptions;
import game.Player;
import org.bson.Document;
import org.bson.types.ObjectId;
import util.GameInfo;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;


public class MongoDB implements Database {
    private MongoClient mongoClient = new MongoClient(new MongoClientURI("mongodb+srv://admin:admin@cluster0-gx7zn.mongodb.net"));
    private MongoDatabase database = mongoClient.getDatabase("RodsAndHarpoonsDB");

    public MongoDB() {
        MongoCollection<Document> players = database.getCollection("players");
        players.createIndex(Indexes.ascending("nickname"), new IndexOptions().unique(true));
    }

    //saves game and returns it's id (as String) auto-generated by database
    @Override
    public String saveGame(GameInfo gameInfo) {
        gameInfo.getPlayers().sort((a, b) -> -Integer.compare(a.getPoints(), b.getPoints()));
        Document document = gameInfo.toDocument();

        database.getCollection("matches").insertOne(document);

        ObjectId gameId = document.get("_id", ObjectId.class);
        return gameId.toHexString();
    }

    @Override
    public void updateGame(String gameId, GameInfo gameInfo) {
        gameInfo.getPlayers().sort((a, b) -> -Integer.compare(a.getPoints(), b.getPoints()));
        replaceDocument(new ObjectId(gameId), gameInfo.toDocument(), database.getCollection("matches"));
    }

    @Override
    public void removeGame(String gameId) {
        database.getCollection("matches").deleteOne(new BasicDBObject("_id", new ObjectId(gameId)));
    }

    public ArrayList<Document> getPlayerMatches(String nickName) {
        ArrayList<Document> result = new ArrayList<>();
        BasicDBObject query = new BasicDBObject("players.nickname", nickName);
        FindIterable<Document> cursor = database.getCollection("matches").find(query);
        for(Document gameDocument : cursor) {
            result.add(gameDocument);
        }
        Collections.reverse(result);
        return result;
    }

    public void updatePlayersHighscores(Collection<Player> players, String gameId) {
        FindOneAndUpdateOptions options = new FindOneAndUpdateOptions().upsert(true);

        for (var player : players) {
            BasicDBObject query = new BasicDBObject("nickname", player.getNickname());
            BasicDBObject matchesUpdate = new BasicDBObject("matches", new ObjectId(gameId));
            BasicDBObject highScoreUpdate = new BasicDBObject("highscore", player.getPoints());
            BasicDBObject update = new BasicDBObject("$addToSet", matchesUpdate)
                    .append("$max", highScoreUpdate);
            database.getCollection("players").findOneAndUpdate(query, update, options);
        }
    }

    //replaces document with given id with newDocument, saving old document's id
    private void replaceDocument(ObjectId _id, Document newDocument, MongoCollection<Document> collection) {
        newDocument.put("_id", _id);
        BasicDBObject updateFields = new BasicDBObject();
        for(Map.Entry<String, Object> e : newDocument.entrySet())
            if(!e.getKey().equals("_id"))
                updateFields.append(e.getKey(), e.getValue());

        collection.updateOne(
                new BasicDBObject("_id", _id),
                new BasicDBObject("$set", updateFields),
                new UpdateOptions().upsert(true)
        );
    }

    private void removeCollection(String collection) {
        database.getCollection(collection).drop();
    }
}
